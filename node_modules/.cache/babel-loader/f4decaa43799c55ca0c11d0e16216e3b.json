{"ast":null,"code":"var _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/Pwned/index.js\";\n\n/**\n * This component uses Troy Hunt's \"Have I been Pwned\" API:\n * https://haveibeenpwned.com/API/v2\n *\n * It checks if a specific passowrd has ever been found in a cracked\n * password breach, and if so, how many times.\n *\n * It requires external libraries:\n * `yarn add js-sha1 numeral`\n */\n// https://medium.com/@baphemot/understanding-react-suspense-1c73b4b0b1e6\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport sha1 from 'js-sha1';\nimport { fetchWithCacheText } from '../../utils/cache';\nimport numeral from 'numeral'; // Class components can bail out from rendering when their input props\n// are the same using PureComponent or shouldComponentUpdate. Now you\n// can do the same with function components by wrapping them in React.memo.\n\nvar Pwned = React.memo(function Pwned(_ref) {\n  var password = _ref.password;\n  var sha = sha1(password).toUpperCase(); // fetch the data\n\n  var list = fetchWithCacheText('https://api.pwnedpasswords.com/range/' + sha.substring(0, 5));\n  var passlist = list.split('\\n'); // filter list\n\n  var result = passlist.filter(function (item) {\n    return item.split(':')[0] === sha.substring(5, 40);\n  }); // get count from filtered result\n\n  var count = result.toString().split(':')[1] || 0; // return message\n\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, formatMessage(count));\n});\nPwned.propTypes = {\n  password: PropTypes.string.isRequired\n};\nexport default Pwned; // format the message\n\nvar formatMessage = function formatMessage(count) {\n  var message = '';\n  var formattedCount = numeral(count).format('0,0'); // format message\n\n  if (count === 1) {\n    message = \"This password was found \".concat(formattedCount, \" time in compromised password databases!\");\n  }\n\n  if (count > 1) {\n    message = \"This password was found \".concat(formattedCount, \" times in compromised password databases!\");\n  }\n\n  return message;\n};","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/Pwned/index.js"],"names":["React","PropTypes","sha1","fetchWithCacheText","numeral","Pwned","memo","password","sha","toUpperCase","list","substring","passlist","split","result","filter","item","count","toString","formatMessage","propTypes","string","isRequired","message","formattedCount","format"],"mappings":";;AAAA;;;;;;;;;;AAWA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,OAAOC,OAAP,MAAoB,SAApB,C,CAEA;AACA;AACA;;AACA,IAAMC,KAAK,GAAGL,KAAK,CAACM,IAAN,CAAW,SAASD,KAAT,OAA6B;AAAA,MAAZE,QAAY,QAAZA,QAAY;AACpD,MAAMC,GAAG,GAAGN,IAAI,CAACK,QAAD,CAAJ,CAAeE,WAAf,EAAZ,CADoD,CAGpD;;AACA,MAAMC,IAAI,GAAGP,kBAAkB,CAC7B,0CAA0CK,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CADb,CAA/B;AAGA,MAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAW,IAAX,CAAjB,CAPoD,CASpD;;AACA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,MAAT,CACb,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACH,KAAL,CAAW,GAAX,EAAgB,CAAhB,MAAuBL,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAA3B;AAAA,GADS,CAAf,CAVoD,CAcpD;;AACA,MAAIM,KAAK,GAAGH,MAAM,CAACI,QAAP,GAAkBL,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,KAAmC,CAA/C,CAfoD,CAiBpD;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIM,aAAa,CAACF,KAAD,CAAjB,CAAP;AACD,CAnBa,CAAd;AAqBAZ,KAAK,CAACe,SAAN,GAAkB;AAChBb,EAAAA,QAAQ,EAAEN,SAAS,CAACoB,MAAV,CAAiBC;AADX,CAAlB;AAIA,eAAejB,KAAf,C,CAEA;;AACA,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAAAF,KAAK,EAAI;AAC7B,MAAIM,OAAO,GAAG,EAAd;AACA,MAAIC,cAAc,GAAGpB,OAAO,CAACa,KAAD,CAAP,CAAeQ,MAAf,CAAsB,KAAtB,CAArB,CAF6B,CAI7B;;AACA,MAAIR,KAAK,KAAK,CAAd,EAAiB;AACfM,IAAAA,OAAO,qCAA8BC,cAA9B,6CAAP;AACD;;AACD,MAAIP,KAAK,GAAG,CAAZ,EAAe;AACbM,IAAAA,OAAO,qCAA8BC,cAA9B,8CAAP;AACD;;AAED,SAAOD,OAAP;AACD,CAbD","sourcesContent":["/**\n * This component uses Troy Hunt's \"Have I been Pwned\" API:\n * https://haveibeenpwned.com/API/v2\n *\n * It checks if a specific passowrd has ever been found in a cracked\n * password breach, and if so, how many times.\n *\n * It requires external libraries:\n * `yarn add js-sha1 numeral`\n */\n\n// https://medium.com/@baphemot/understanding-react-suspense-1c73b4b0b1e6\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport sha1 from 'js-sha1';\nimport { fetchWithCacheText } from '../../utils/cache';\nimport numeral from 'numeral';\n\n// Class components can bail out from rendering when their input props\n// are the same using PureComponent or shouldComponentUpdate. Now you\n// can do the same with function components by wrapping them in React.memo.\nconst Pwned = React.memo(function Pwned({ password }) {\n  const sha = sha1(password).toUpperCase();\n\n  // fetch the data\n  const list = fetchWithCacheText(\n    'https://api.pwnedpasswords.com/range/' + sha.substring(0, 5)\n  );\n  const passlist = list.split('\\n');\n\n  // filter list\n  const result = passlist.filter(\n    item => item.split(':')[0] === sha.substring(5, 40)\n  );\n\n  // get count from filtered result\n  let count = result.toString().split(':')[1] || 0;\n\n  // return message\n  return <p>{formatMessage(count)}</p>;\n});\n\nPwned.propTypes = {\n  password: PropTypes.string.isRequired,\n};\n\nexport default Pwned;\n\n// format the message\nconst formatMessage = count => {\n  let message = '';\n  let formattedCount = numeral(count).format('0,0');\n\n  // format message\n  if (count === 1) {\n    message = `This password was found ${formattedCount} time in compromised password databases!`;\n  }\n  if (count > 1) {\n    message = `This password was found ${formattedCount} times in compromised password databases!`;\n  }\n\n  return message;\n};\n"]},"metadata":{},"sourceType":"module"}