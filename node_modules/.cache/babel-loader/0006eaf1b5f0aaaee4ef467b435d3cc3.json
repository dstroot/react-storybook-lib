{"ast":null,"code":"import _slicedToArray from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/LoginForm/index.js\";\nimport React, { Suspense, useState, useRef, useEffect } from 'react';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport Pwned from '../Pwned';\nimport zxcvbn from 'zxcvbn';\n\nvar LoginForm = function LoginForm(_ref) {\n  var image = _ref.image;\n\n  // state\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(0.01),\n      _useState4 = _slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      time = _useState6[0],\n      setTime = _useState6[1]; // custom hook\n\n\n  var _useWindowSize = useWindowSize(),\n      width = _useWindowSize.width,\n      height = _useWindowSize.height; // canvas/image\n\n\n  var canvas = useRef();\n  var img = new Image();\n  img.src = image;\n  var imgRatio = 0; // When you call useEffect, you’re telling React to run your “effect”\n  // function after flushing changes to the DOM. Effects are declared\n  // inside the component so they have access to its props and state.\n  // By default, React runs the effects after every render — including\n  // the first render. If you want your effects to run less often,\n  // you can provide a second argument – an array of values. Think\n  // of them as the dependencies for that effect. If one of the\n  // dependencies has changed since the last time, the effect will\n  // run again. (It will also still run after the initial render)\n\n  useEffect(function () {\n    var ctx = canvas.current.getContext('2d');\n\n    img.onload = function () {\n      imgRatio = img.naturalWidth / img.naturalHeight;\n      draw(ctx, width, height);\n    };\n  }, [image, size, width, height]); // Calculate the strength of the password using zxcvbn and save\n  // the result into our state.\n\n  var computePassword = function computePassword(e) {\n    setPassword(e.target.value);\n    var result = zxcvbn(e.target.value); // We want to reveal the image as the password gets stronger. Since the\n    // zxcvbn.score has only 5 different values (0-4) we will use the\n    // zxcvbn.guesses_log10 output. The guesses_log10 will be >= 11 when\n    // the password is considered strong, so we want to map a factor of 1\n    // (all pixelated) to 100 (clear image) to a value of 0 to 11 of\n    // guesses_log10. This result will be used in the render function.\n\n    var scaleFactor = 99 / 11 * Math.min(11, Math.round(result.guesses_log10)) + 1; // Adjust the scaleFactor down so we mostly see pixels rather than\n    // the clear image.\n\n    if (scaleFactor > 1 && scaleFactor < 100) {\n      scaleFactor = scaleFactor / 3;\n    } // scaleFactor will depend on the current typed password.\n    // values will be in the range [1,100].\n\n\n    setSize(scaleFactor * 0.01); // create a message based on the score\n\n    if (e !== '') {\n      setTime(\"That password will take \".concat(result.crack_times_display.offline_slow_hashing_1e4_per_second, \" to crack.\"));\n    }\n  }; // draw the image on the canvas\n\n\n  var draw = function draw(ctx, width, height) {\n    ctx.canvas.width = width;\n    ctx.canvas.height = height; // set dimensions\n\n    var newWidth = width;\n    var newHeight = height;\n    var wrapperRatio = newWidth / newHeight;\n    var newX = 0;\n    var newY = 0; // fit image inside canvas\n\n    if (wrapperRatio > imgRatio) {\n      newHeight = width / imgRatio;\n      newY = (height - newHeight) / 2;\n    } else {\n      newWidth = height * imgRatio;\n      newX = (width - newWidth) / 2;\n    } // draw original image to a smaller, scaled down size\n\n\n    ctx.drawImage(img, 0, 0, width * size, height * size); // turn off image aliasing - this will give the pixelated effect\n\n    ctx.mozImageSmoothingEnabled = false;\n    ctx.webkitImageSmoothingEnabled = false;\n    ctx.msImageSmoothingEnabled = false;\n    ctx.imageSmoothingEnabled = false; // then draw that smaller image back to fill canvas -\n    // Since smoothing is off the result will be pixelated\n\n    ctx.drawImage(canvas.current, 0, 0, width * size, height * size, newX, newY, newWidth + 0.05 * width, newHeight + 0.05 * height);\n  }; // render canvas\n\n\n  return React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-4 d-flex flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"mt-auto mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    className: \"form-control\",\n    id: \"email\",\n    name: \"email\",\n    \"aria-describedby\": \"emailHelp\",\n    placeholder: \"Enter email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"We'll never share your email with anyone else.\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    onChange: computePassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    className: \"form-text text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, time), React.createElement(\"small\", {\n    className: \"form-text text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Suspense, {\n    fallback: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Loading...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Pwned, {\n    password: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })))), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(\"small\", {\n    className: \"mt-3 form-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Need to\", ' ', React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"sign up?\"))))), React.createElement(\"div\", {\n    className: \"col-md-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"canvas-wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    ref: canvas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })))));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/LoginForm/index.js"],"names":["React","Suspense","useState","useRef","useEffect","useWindowSize","Pwned","zxcvbn","LoginForm","image","password","setPassword","size","setSize","time","setTime","width","height","canvas","img","Image","src","imgRatio","ctx","current","getContext","onload","naturalWidth","naturalHeight","draw","computePassword","e","target","value","result","scaleFactor","Math","min","round","guesses_log10","crack_times_display","offline_slow_hashing_1e4_per_second","newWidth","newHeight","wrapperRatio","newX","newY","drawImage","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingEnabled"],"mappings":"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","sourcesContent":["import React, { Suspense, useState, useRef, useEffect } from 'react';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport Pwned from '../Pwned';\nimport zxcvbn from 'zxcvbn';\n\nconst LoginForm = ({ image }) => {\n  // state\n  const [password, setPassword] = useState('');\n  const [size, setSize] = useState(0.01);\n  const [time, setTime] = useState('');\n\n  // custom hook\n  let { width, height } = useWindowSize();\n\n  // canvas/image\n  const canvas = useRef();\n  const img = new Image();\n  img.src = image;\n  let imgRatio = 0;\n\n  // When you call useEffect, you’re telling React to run your “effect”\n  // function after flushing changes to the DOM. Effects are declared\n  // inside the component so they have access to its props and state.\n  // By default, React runs the effects after every render — including\n  // the first render. If you want your effects to run less often,\n  // you can provide a second argument – an array of values. Think\n  // of them as the dependencies for that effect. If one of the\n  // dependencies has changed since the last time, the effect will\n  // run again. (It will also still run after the initial render)\n  useEffect(\n    () => {\n      let ctx = canvas.current.getContext('2d');\n      img.onload = () => {\n        imgRatio = img.naturalWidth / img.naturalHeight;\n        draw(ctx, width, height);\n      };\n    },\n    [image, size, width, height]\n  );\n\n  // Calculate the strength of the password using zxcvbn and save\n  // the result into our state.\n  const computePassword = e => {\n    setPassword(e.target.value);\n    const result = zxcvbn(e.target.value);\n\n    // We want to reveal the image as the password gets stronger. Since the\n    // zxcvbn.score has only 5 different values (0-4) we will use the\n    // zxcvbn.guesses_log10 output. The guesses_log10 will be >= 11 when\n    // the password is considered strong, so we want to map a factor of 1\n    // (all pixelated) to 100 (clear image) to a value of 0 to 11 of\n    // guesses_log10. This result will be used in the render function.\n    let scaleFactor =\n      (99 / 11) * Math.min(11, Math.round(result.guesses_log10)) + 1;\n\n    // Adjust the scaleFactor down so we mostly see pixels rather than\n    // the clear image.\n    if (scaleFactor > 1 && scaleFactor < 100) {\n      scaleFactor = scaleFactor / 3;\n    }\n\n    // scaleFactor will depend on the current typed password.\n    // values will be in the range [1,100].\n    setSize(scaleFactor * 0.01);\n\n    // create a message based on the score\n    if (e !== '') {\n      setTime(\n        `That password will take ${\n          result.crack_times_display.offline_slow_hashing_1e4_per_second\n        } to crack.`\n      );\n    }\n  };\n\n  // draw the image on the canvas\n  const draw = (ctx, width, height) => {\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n\n    // set dimensions\n    let newWidth = width;\n    let newHeight = height;\n    let wrapperRatio = newWidth / newHeight;\n    let newX = 0;\n    let newY = 0;\n\n    // fit image inside canvas\n    if (wrapperRatio > imgRatio) {\n      newHeight = width / imgRatio;\n      newY = (height - newHeight) / 2;\n    } else {\n      newWidth = height * imgRatio;\n      newX = (width - newWidth) / 2;\n    }\n\n    // draw original image to a smaller, scaled down size\n    ctx.drawImage(img, 0, 0, width * size, height * size);\n\n    // turn off image aliasing - this will give the pixelated effect\n    ctx.mozImageSmoothingEnabled = false;\n    ctx.webkitImageSmoothingEnabled = false;\n    ctx.msImageSmoothingEnabled = false;\n    ctx.imageSmoothingEnabled = false;\n\n    // then draw that smaller image back to fill canvas -\n    // Since smoothing is off the result will be pixelated\n    ctx.drawImage(\n      canvas.current,\n      0,\n      0,\n      width * size,\n      height * size,\n      newX,\n      newY,\n      newWidth + 0.05 * width,\n      newHeight + 0.05 * height\n    );\n  };\n\n  // render canvas\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-4 d-flex flex-column\">\n          <form className=\"mt-auto mb-5\">\n            <div className=\"form-group\">\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"email\"\n                name=\"email\"\n                aria-describedby=\"emailHelp\"\n                placeholder=\"Enter email\"\n              />\n              <small id=\"emailHelp\" className=\"form-text text-muted\">\n                We'll never share your email with anyone else.\n              </small>\n            </div>\n            <div className=\"form-group\">\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={computePassword}\n              />\n              <small className=\"form-text text-muted\">{time}</small>\n              <small className=\"form-text text-danger\">\n                <Suspense fallback={<div>Loading...</div>}>\n                  <Pwned password={password} />\n                </Suspense>\n              </small>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n            <small className=\"mt-3 form-text\">\n              Need to{' '}\n              <strong>\n                <a href=\"/\">sign up?</a>\n              </strong>\n            </small>\n          </form>\n        </div>\n        <div className=\"col-md-8\">\n          <div className=\"canvas-wrap\">\n            <canvas ref={canvas} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}