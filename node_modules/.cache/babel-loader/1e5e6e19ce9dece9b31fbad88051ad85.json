{"ast":null,"code":"import _slicedToArray from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nvar useMediaQuery = function useMediaQuery(query) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    var mounted = true; // Returns a MediaQueryList object\n\n    var mql = window.matchMedia(query);\n\n    var onChange = function onChange() {\n      if (!mounted) return;\n      setState(!!mql.matches);\n    };\n\n    mql.addListener(onChange);\n    setState(mql.matches); // clean up\n\n    return function () {\n      mounted = false;\n      mql.removeListener(onChange);\n    };\n  }, [query]);\n  return state;\n};\n\nexport default useMediaQuery;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/hooks/useMediaQuery.js"],"names":["useState","useEffect","useMediaQuery","query","state","setState","mounted","mql","window","matchMedia","onChange","matches","addListener","removeListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAAA,kBACHH,QAAQ,CAAC,KAAD,CADL;AAAA;AAAA,MACtBI,KADsB;AAAA,MACfC,QADe;;AAG7BJ,EAAAA,SAAS,CACP,YAAM;AACJ,QAAIK,OAAO,GAAG,IAAd,CADI,CAGJ;;AACA,QAAMC,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkBN,KAAlB,CAAZ;;AACA,QAAMO,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,UAAI,CAACJ,OAAL,EAAc;AACdD,MAAAA,QAAQ,CAAC,CAAC,CAACE,GAAG,CAACI,OAAP,CAAR;AACD,KAHD;;AAKAJ,IAAAA,GAAG,CAACK,WAAJ,CAAgBF,QAAhB;AACAL,IAAAA,QAAQ,CAACE,GAAG,CAACI,OAAL,CAAR,CAXI,CAaJ;;AACA,WAAO,YAAM;AACXL,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,GAAG,CAACM,cAAJ,CAAmBH,QAAnB;AACD,KAHD;AAID,GAnBM,EAoBP,CAACP,KAAD,CApBO,CAAT;AAuBA,SAAOC,KAAP;AACD,CA3BD;;AA6BA,eAAeF,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useMediaQuery = query => {\n  const [state, setState] = useState(false);\n\n  useEffect(\n    () => {\n      let mounted = true;\n\n      // Returns a MediaQueryList object\n      const mql = window.matchMedia(query);\n      const onChange = () => {\n        if (!mounted) return;\n        setState(!!mql.matches);\n      };\n\n      mql.addListener(onChange);\n      setState(mql.matches);\n\n      // clean up\n      return () => {\n        mounted = false;\n        mql.removeListener(onChange);\n      };\n    },\n    [query]\n  );\n\n  return state;\n};\n\nexport default useMediaQuery;\n"]},"metadata":{},"sourceType":"module"}