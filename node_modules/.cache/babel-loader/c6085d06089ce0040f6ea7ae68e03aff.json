{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/APIList/index.js\";\nimport React, { useEffect, useState } from \"react\"; // render list from JSON response to URL\n// <APIList url=\"https://www.dallasopendata.com/resource/f29b-eiwd.json\" />\n\nvar APIList = function APIList(_ref) {\n  var url = _ref.url;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      records = _useState2[0],\n      setRecords = _useState2[1]; // Async get data via API\n\n\n  var getData =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var res, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(url);\n\n            case 3:\n              res = _context.sent;\n\n              if (!res.ok) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              json = _context.sent;\n              setRecords(json);\n              _context.next = 12;\n              break;\n\n            case 11:\n              setError(new Error(res.status + \" \" + res.statusText));\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              setError(new Error(\"The events API did not return any data. Check your privacy tools (such as Privacy Badger) and ad blockers (such as uBlock Origin).\"));\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 14]]);\n    }));\n\n    return function getData() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // pass empty array to useEffect so we only\n  // process once when mounting the component.\n\n\n  useEffect(function () {\n    getData();\n  }, []); // empty array\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Open Data List\"), React.createElement(NoKeyList, {\n    records: records,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n}; // render list with keys\n\n\nvar List = function List(_ref3) {\n  var records = _ref3.records;\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, records.map(function (record) {\n    return React.createElement(\"li\", {\n      key: record.docid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Activity: \", record.activity, \", Amount: \", record.chksubtot, \", Year:\", \" \", record.fy, \", Vendor: \", record.vendor);\n  }), \";\");\n}; // If there is no record id (key) you can use the index\n// as the key but this is not recommended.\n\n\nvar NoKeyList = function NoKeyList(_ref4) {\n  var records = _ref4.records;\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, records.map(function (record, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Department: \", record.department, \", Activity: \", record.activity, \", Amount:\", record.chksubtot, \", Year: \", record.fy, \", Vendor: \", record.vendor);\n  }));\n};\n\nexport default APIList;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/APIList/index.js"],"names":["React","useEffect","useState","APIList","url","records","setRecords","getData","fetch","res","ok","json","setError","Error","status","statusText","List","map","record","docid","activity","chksubtot","fy","vendor","NoKeyList","index","department"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAAA,kBACGF,QAAQ,CAAC,EAAD,CADX;AAAA;AAAA,MACpBG,OADoB;AAAA,MACXC,UADW,kBAG3B;;;AACA,MAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGMC,KAAK,CAACJ,GAAD,CAHX;;AAAA;AAGNK,cAAAA,GAHM;;AAAA,mBAMRA,GAAG,CAACC,EANI;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOSD,GAAG,CAACE,IAAJ,EAPT;;AAAA;AAOJA,cAAAA,IAPI;AAQVL,cAAAA,UAAU,CAACK,IAAD,CAAV;AARU;AAAA;;AAAA;AAUVC,cAAAA,QAAQ,CAAC,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,MAAJ,GAAa,GAAb,GAAmBL,GAAG,CAACM,UAAjC,CAAD,CAAR;;AAVU;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaZH,cAAAA,QAAQ,CACN,IAAIC,KAAJ,CACE,oIADF,CADM,CAAR;;AAbY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPN,OAAO;AAAA;AAAA;AAAA,KAAb,CAJ2B,CAyB3B;AACA;;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT,CA3B2B,CA6BnB;;AAER,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEF,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CArCD,C,CAuCA;;;AACA,IAAMW,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAGX,OAAH,SAAGA,OAAH;AAAA,SACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACY,GAAR,CAAY,UAAAC,MAAM;AAAA,WACjB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACaD,MAAM,CAACE,QADpB,gBACwCF,MAAM,CAACG,SAD/C,aACiE,GADjE,EAEGH,MAAM,CAACI,EAFV,gBAEwBJ,MAAM,CAACK,MAF/B,CADiB;AAAA,GAAlB,CADH,MADW;AAAA,CAAb,C,CAYA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGnB,OAAH,SAAGA,OAAH;AAAA,SAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACY,GAAR,CAAY,UAACC,MAAD,EAASO,KAAT;AAAA,WACX;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACeP,MAAM,CAACQ,UADtB,kBAC8CR,MAAM,CAACE,QADrD,eAEGF,MAAM,CAACG,SAFV,cAE6BH,MAAM,CAACI,EAFpC,gBAEkDJ,MAAM,CAACK,MAFzD,CADW;AAAA,GAAZ,CADH,CADgB;AAAA,CAAlB;;AAWA,eAAepB,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// render list from JSON response to URL\n// <APIList url=\"https://www.dallasopendata.com/resource/f29b-eiwd.json\" />\nconst APIList = ({ url }) => {\n  const [records, setRecords] = useState([]);\n\n  // Async get data via API\n  const getData = async () => {\n    try {\n      // get data\n      const res = await fetch(url);\n\n      // process response\n      if (res.ok) {\n        const json = await res.json();\n        setRecords(json);\n      } else {\n        setError(new Error(res.status + \" \" + res.statusText));\n      }\n    } catch (err) {\n      setError(\n        new Error(\n          \"The events API did not return any data. Check your privacy tools (such as Privacy Badger) and ad blockers (such as uBlock Origin).\"\n        )\n      );\n    }\n  };\n\n  // pass empty array to useEffect so we only\n  // process once when mounting the component.\n  useEffect(() => {\n    getData();\n  }, []); // empty array\n\n  return (\n    <div>\n      <h1>Open Data List</h1>\n      <NoKeyList records={records} />\n    </div>\n  );\n};\n\n// render list with keys\nconst List = ({ records }) => (\n  <ul>\n    {records.map(record => (\n      <li key={record.docid}>\n        Activity: {record.activity}, Amount: {record.chksubtot}, Year:{\" \"}\n        {record.fy}, Vendor: {record.vendor}\n      </li>\n    ))}\n    ;\n  </ul>\n);\n\n// If there is no record id (key) you can use the index\n// as the key but this is not recommended.\nconst NoKeyList = ({ records }) => (\n  <ul>\n    {records.map((record, index) => (\n      <li key={index}>\n        Department: {record.department}, Activity: {record.activity}, Amount:\n        {record.chksubtot}, Year: {record.fy}, Vendor: {record.vendor}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default APIList;\n"]},"metadata":{},"sourceType":"module"}