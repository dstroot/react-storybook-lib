{"ast":null,"code":"import _classCallCheck from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/DataVisualization/index.js\";\nimport React from 'react';\nimport { Treemap } from 'react-vis';\nimport data from './data.json';\nimport ShowcaseButton from './ShowcaseButton';\nimport '../../../node_modules/react-vis/dist/style.css';\nvar MODE = ['circlePack', 'partition', 'partition-pivot', 'squarify', 'resquarify', 'slice', 'dice', 'slicedice', 'binary'];\nvar STYLES = {\n  SVG: {\n    stroke: '#ddd',\n    strokeWidth: '0.25',\n    strokeOpacity: 0.5\n  },\n  DOM: {\n    border: 'thin solid #ddd'\n  }\n};\n\nvar DataVisualization =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DataVisualization, _React$Component);\n\n  function DataVisualization() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataVisualization);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataVisualization)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      modeIndex: 0,\n      useSVG: true\n    };\n\n    _this.updateModeIndex = function (increment) {\n      return function () {\n        var newIndex = _this.state.modeIndex + (increment ? 1 : -1);\n        var modeIndex = newIndex < 0 ? MODE.length - 1 : newIndex >= MODE.length ? 0 : newIndex;\n\n        _this.setState({\n          modeIndex: modeIndex\n        });\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(DataVisualization, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          modeIndex = _this$state.modeIndex,\n          useSVG = _this$state.useSVG;\n      return React.createElement(\"div\", {\n        className: \"centered-and-flexed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"centered-and-flexed-controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(ShowcaseButton, {\n        onClick: function onClick() {\n          return _this2.setState({\n            useSVG: !useSVG\n          });\n        },\n        buttonContent: useSVG ? 'USE DOM' : 'USE SVG',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"centered-and-flexed-controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(ShowcaseButton, {\n        onClick: this.updateModeIndex(false),\n        buttonContent: 'PREV MODE',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \" \", MODE[modeIndex], \" \"), React.createElement(ShowcaseButton, {\n        onClick: this.updateModeIndex(true),\n        buttonContent: 'NEXT MODE',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(Treemap, Object.assign({\n        animation: false,\n        className: 'nested-tree-example',\n        colorType: 'literal',\n        colorRange: ['#88572C'],\n        data: data,\n        mode: MODE[modeIndex],\n        renderMode: useSVG ? 'SVG' : 'DOM',\n        height: 600,\n        width: 1000,\n        margin: 10,\n        getSize: function getSize(d) {\n          return d.value;\n        },\n        getColor: function getColor(d) {\n          return d.hex;\n        },\n        style: STYLES[useSVG ? 'SVG' : 'DOM'],\n        hideRootNode: true\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DataVisualization;\n}(React.Component);\n\nexport default DataVisualization;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/DataVisualization/index.js"],"names":["React","Treemap","data","ShowcaseButton","MODE","STYLES","SVG","stroke","strokeWidth","strokeOpacity","DOM","border","DataVisualization","state","modeIndex","useSVG","updateModeIndex","increment","newIndex","length","setState","animation","className","colorType","colorRange","mode","renderMode","height","width","margin","getSize","d","value","getColor","hex","style","hideRootNode","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Treemap } from 'react-vis';\nimport data from './data.json';\nimport ShowcaseButton from './ShowcaseButton';\n\nimport '../../../node_modules/react-vis/dist/style.css';\n\nconst MODE = [\n  'circlePack',\n  'partition',\n  'partition-pivot',\n  'squarify',\n  'resquarify',\n  'slice',\n  'dice',\n  'slicedice',\n  'binary',\n];\n\nconst STYLES = {\n  SVG: {\n    stroke: '#ddd',\n    strokeWidth: '0.25',\n    strokeOpacity: 0.5,\n  },\n  DOM: {\n    border: 'thin solid #ddd',\n  },\n};\n\nclass DataVisualization extends React.Component {\n  state = {\n    modeIndex: 0,\n    useSVG: true,\n  };\n\n  updateModeIndex = increment => () => {\n    const newIndex = this.state.modeIndex + (increment ? 1 : -1);\n    const modeIndex =\n      newIndex < 0 ? MODE.length - 1 : newIndex >= MODE.length ? 0 : newIndex;\n    this.setState({ modeIndex });\n  };\n\n  render() {\n    const { modeIndex, useSVG } = this.state;\n\n    return (\n      <div className=\"centered-and-flexed\">\n        <div className=\"centered-and-flexed-controls\">\n          <ShowcaseButton\n            onClick={() => this.setState({ useSVG: !useSVG })}\n            buttonContent={useSVG ? 'USE DOM' : 'USE SVG'}\n          />\n        </div>\n        <div className=\"centered-and-flexed-controls\">\n          <ShowcaseButton\n            onClick={this.updateModeIndex(false)}\n            buttonContent={'PREV MODE'}\n          />\n          <div> {MODE[modeIndex]} </div>\n          <ShowcaseButton\n            onClick={this.updateModeIndex(true)}\n            buttonContent={'NEXT MODE'}\n          />\n        </div>\n        <Treemap\n          {...{\n            animation: false,\n            className: 'nested-tree-example',\n            colorType: 'literal',\n            colorRange: ['#88572C'],\n            data: data,\n            mode: MODE[modeIndex],\n            renderMode: useSVG ? 'SVG' : 'DOM',\n            height: 600,\n            width: 1000,\n            margin: 10,\n            getSize: d => d.value,\n            getColor: d => d.hex,\n            style: STYLES[useSVG ? 'SVG' : 'DOM'],\n            hideRootNode: true,\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataVisualization;\n"]},"metadata":{},"sourceType":"module"}