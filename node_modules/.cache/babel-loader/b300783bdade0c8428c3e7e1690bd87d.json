{"ast":null,"code":"import _classCallCheck from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/ContactForm/index.js\";\nimport React, { PureComponent } from \"react\";\nimport { validateResponse } from \"../../utils/fetchUtils\";\nimport { formToJSONString, matchPattern } from \"../../utils/formUtils\";\nimport Button from \"../Button\"; // https://medium.com/@everdimension/how-to-handle-forms-with-just-react-ac066c48bd4f\n// https://developer.mozilla.org/en-US/docs/Web/API/FormData\n// https://daveceddia.com/ajax-requests-in-react/\n// https://daveceddia.com/where-initialize-state-react/\n// https://blog.hellojs.org/fetching-api-data-with-react-js-460fe8bbf8f2\n\nvar unclick = function unclick() {\n  if (document.activeElement !== document.body) {\n    document.activeElement.blur();\n  }\n}; // NOTE: If your React component’s render() function renders the same result\n// given the same props and state, you can use React.PureComponent for a\n// performance boost in some cases. The best use case for PureComponent\n// are presentational components which have no child components and no\n// dependencies on the global state in the application.\n// https://reactjs.org/docs/react-api.html#reactpurecomponent\n\n\nvar ContactForm =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ContactForm, _PureComponent);\n\n  function ContactForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      valid: true,\n      submitted: false,\n      success: \"wait\",\n      // 'wait', 'yes', 'no'\n      message: \"\"\n    };\n\n    _this.handleTextarea = function (event) {\n      matchPattern(event);\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault(); // NOTE: When you add name attributes to your inputs, you add structure\n      // to your form. This structure can be serialized by the native FormData\n      // interface (basic support in all browsers and IE10+). All you do is\n      // pass in a form element (which we access via event.target) to the\n      // FormData constructor and you get a serialized interpretation of the\n      // inputs which can be sent to the server.\n      // get form\n\n      var form = event.target; // check form data validity first\n\n      if (!form.checkValidity()) {\n        _this.setState({\n          valid: false\n        });\n\n        unclick(); // remove focus on button\n\n        return;\n      } // all good let's continue\n\n\n      _this.setState({\n        valid: true,\n        submitted: true,\n        message: \"\"\n      }); // convert form data to JSON\n\n\n      var json = formToJSONString(form); // post data using fetch (ugh... language)\n      // http://localhost:5000/verite-data-science/us-central1/contact\n\n      fetch(\"//formspree.io/dan.stroot@veritedatascience.com\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: json\n      }).then(validateResponse).then(function (res) {\n        _this.setState({\n          submitted: true,\n          success: \"yes\"\n        });\n\n        form.reset();\n        unclick(); // remove focus on button\n      }).catch(function (error) {\n        _this.setState({\n          submitted: true,\n          success: \"no\",\n          message: \"\".concat(error.toString())\n        });\n\n        form.reset();\n        unclick(); // remove focus on button\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.title = \"Verite Data Science \\u2022 Contact\";\n      requestAnimationFrame(function () {\n        window.scrollTo(0, 0);\n      });\n    } // This function will enable the pattern attribute\n    // on a textarea and trigger HTML5 validation.\n\n  }, {\n    key: \"render\",\n    // Don’t add an onClick listener to the button. If we did, we would\n    // not be able to respond to submit events triggered from the keyboard\n    // (by pressing enter). That’s bad UX. By using the onSubmit callback\n    // we cover both cases.\n    // https://www.reddit.com/r/reactjs/comments/acitl7/nice_forms_a11yux_trick_from_wes_bos_advanced/\n    value: function render() {\n      var _this$state = this.state,\n          valid = _this$state.valid,\n          submitted = _this$state.submitted,\n          success = _this$state.success,\n          message = _this$state.message;\n      return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        noValidate: true,\n        className: !valid ? \"was-validated\" : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6 offset-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        disabled: submitted,\n        \"aria-busy\": submitted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"_gotcha\",\n        className: \"invisible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"hidden\",\n        name: \"_subject\",\n        value: \"Website Contact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        className: \"mt-3 font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Contact Us:\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        name: \"name\",\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Please enter your name\",\n        pattern: \".*\\\\S+.*\",\n        \"data-parse\": \"trim\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Please enter your name.\"), React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Looks good!\")), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Email address\"), React.createElement(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        className: \"form-control\",\n        placeholder: \"you@youremail.com\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Please enter a valid email address.\"), React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Looks good!\")), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Phone Number\"), React.createElement(\"input\", {\n        name: \"phone\",\n        type: \"tel\",\n        pattern: \"^[0-9-+s()]*$\",\n        className: \"form-control\",\n        placeholder: \"(123) 456-7890\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Please enter a valid phone number.\"), React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Optional\")), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Short Message\"), React.createElement(\"textarea\", {\n        name: \"message\",\n        className: \"form-control\",\n        placeholder: \"Please enter a short message\",\n        pattern: \".*\\\\S+.*\",\n        \"data-parse\": \"trim\",\n        required: true,\n        onChange: this.handleTextarea,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Please let us know how we can help!\"), React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Looks good!\"))), React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Button, {\n        submitted: submitted,\n        success: success,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6 offset-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, message ? React.createElement(\"p\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, message) : \"\")));\n    }\n  }]);\n\n  return ContactForm;\n}(PureComponent);\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/ContactForm/index.js"],"names":["React","PureComponent","validateResponse","formToJSONString","matchPattern","Button","unclick","document","activeElement","body","blur","ContactForm","state","valid","submitted","success","message","handleTextarea","event","handleSubmit","preventDefault","form","target","checkValidity","setState","json","fetch","method","headers","then","res","reset","catch","error","toString","title","requestAnimationFrame","window","scrollTo"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { validateResponse } from \"../../utils/fetchUtils\";\nimport { formToJSONString, matchPattern } from \"../../utils/formUtils\";\nimport Button from \"../Button\";\n\n// https://medium.com/@everdimension/how-to-handle-forms-with-just-react-ac066c48bd4f\n// https://developer.mozilla.org/en-US/docs/Web/API/FormData\n// https://daveceddia.com/ajax-requests-in-react/\n// https://daveceddia.com/where-initialize-state-react/\n// https://blog.hellojs.org/fetching-api-data-with-react-js-460fe8bbf8f2\n\nconst unclick = () => {\n  if (document.activeElement !== document.body) {\n    document.activeElement.blur();\n  }\n};\n\n// NOTE: If your React component’s render() function renders the same result\n// given the same props and state, you can use React.PureComponent for a\n// performance boost in some cases. The best use case for PureComponent\n// are presentational components which have no child components and no\n// dependencies on the global state in the application.\n// https://reactjs.org/docs/react-api.html#reactpurecomponent\n\nclass ContactForm extends PureComponent {\n  state = {\n    valid: true,\n    submitted: false,\n    success: \"wait\", // 'wait', 'yes', 'no'\n    message: \"\"\n  };\n\n  componentDidMount() {\n    document.title = `Verite Data Science • Contact`;\n    requestAnimationFrame(() => {\n      window.scrollTo(0, 0);\n    });\n  }\n\n  // This function will enable the pattern attribute\n  // on a textarea and trigger HTML5 validation.\n  handleTextarea = event => {\n    matchPattern(event);\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    // NOTE: When you add name attributes to your inputs, you add structure\n    // to your form. This structure can be serialized by the native FormData\n    // interface (basic support in all browsers and IE10+). All you do is\n    // pass in a form element (which we access via event.target) to the\n    // FormData constructor and you get a serialized interpretation of the\n    // inputs which can be sent to the server.\n\n    // get form\n    const form = event.target;\n\n    // check form data validity first\n    if (!form.checkValidity()) {\n      this.setState({ valid: false });\n      unclick(); // remove focus on button\n      return;\n    }\n\n    // all good let's continue\n    this.setState({\n      valid: true,\n      submitted: true,\n      message: \"\"\n    });\n\n    // convert form data to JSON\n    const json = formToJSONString(form);\n\n    // post data using fetch (ugh... language)\n    // http://localhost:5000/verite-data-science/us-central1/contact\n    fetch(\"//formspree.io/dan.stroot@veritedatascience.com\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: json\n    })\n      .then(validateResponse)\n      .then(res => {\n        this.setState({\n          submitted: true,\n          success: \"yes\"\n        });\n        form.reset();\n        unclick(); // remove focus on button\n      })\n      .catch(error => {\n        this.setState({\n          submitted: true,\n          success: \"no\",\n          message: `${error.toString()}`\n        });\n        form.reset();\n        unclick(); // remove focus on button\n      });\n  };\n\n  // Don’t add an onClick listener to the button. If we did, we would\n  // not be able to respond to submit events triggered from the keyboard\n  // (by pressing enter). That’s bad UX. By using the onSubmit callback\n  // we cover both cases.\n  // https://www.reddit.com/r/reactjs/comments/acitl7/nice_forms_a11yux_trick_from_wes_bos_advanced/\n  render() {\n    const { valid, submitted, success, message } = this.state;\n    return (\n      <>\n        <form\n          onSubmit={this.handleSubmit}\n          noValidate\n          className={!valid ? \"was-validated\" : \"\"}\n        >\n          <div className=\"form-row\">\n            <div className=\"col-md-6 offset-md-3\">\n              <fieldset disabled={submitted} aria-busy={submitted}>\n                {/* hidden inputs */}\n                <input type=\"text\" name=\"_gotcha\" className=\"invisible\" />\n                <input type=\"hidden\" name=\"_subject\" value=\"Website Contact\" />\n\n                <h3 className=\"mt-3 font-weight-light\">Contact Us:</h3>\n\n                {/* Name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Name</label>\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Please enter your name\"\n                    pattern=\".*\\S+.*\"\n                    data-parse=\"trim\"\n                    required\n                  />\n                  <div className=\"invalid-feedback\">\n                    Please enter your name.\n                  </div>\n                  <div className=\"valid-feedback\">Looks good!</div>\n                </div>\n\n                {/* email address */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email address</label>\n                  <input\n                    name=\"email\"\n                    type=\"email\"\n                    className=\"form-control\"\n                    placeholder=\"you@youremail.com\"\n                    required\n                  />\n                  <div className=\"invalid-feedback\">\n                    Please enter a valid email address.\n                  </div>\n                  <div className=\"valid-feedback\">Looks good!</div>\n                </div>\n\n                {/* phone */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Phone Number</label>\n                  <input\n                    name=\"phone\"\n                    type=\"tel\"\n                    pattern=\"^[0-9-+s()]*$\"\n                    className=\"form-control\"\n                    placeholder=\"(123) 456-7890\"\n                  />\n                  <div className=\"invalid-feedback\">\n                    Please enter a valid phone number.\n                  </div>\n                  <div className=\"valid-feedback\">Optional</div>\n                </div>\n\n                {/* message area */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Short Message</label>\n                  <textarea\n                    name=\"message\"\n                    className=\"form-control\"\n                    placeholder=\"Please enter a short message\"\n                    pattern=\".*\\S+.*\"\n                    data-parse=\"trim\"\n                    required\n                    onChange={this.handleTextarea}\n                  />\n                  <div className=\"invalid-feedback\">\n                    Please let us know how we can help!\n                  </div>\n                  <div className=\"valid-feedback\">Looks good!</div>\n                </div>\n              </fieldset>\n\n              {/* Submit button */}\n              <div className=\"form-row\">\n                <div className=\"col-md-5\">\n                  <Button submitted={submitted} success={success} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            {message ? <p className=\"text-danger\">{message}</p> : \"\"}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}