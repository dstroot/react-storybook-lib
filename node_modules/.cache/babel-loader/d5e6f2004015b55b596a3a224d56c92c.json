{"ast":null,"code":"import _slicedToArray from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport var inputParsers = {\n  date: function date(input) {\n    var _input$split = input.split('/'),\n        _input$split2 = _slicedToArray(_input$split, 3),\n        month = _input$split2[0],\n        day = _input$split2[1],\n        year = _input$split2[2];\n\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  },\n  uppercase: function uppercase(input) {\n    return input.toUpperCase();\n  },\n  trim: function trim(input) {\n    return input.trim();\n  },\n  number: function number(input) {\n    return parseFloat(input);\n  }\n}; // use input parsers above\n// https://medium.com/@everdimension/how-to-handle-forms-with-just-react-ac066c48bd4f\n\nexport var formDataParser = function formDataParser(form) {\n  var data = new FormData(form);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = data.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var name = _step.value;\n      var input = form.elements[name];\n      var parserName = input.dataset.parse;\n\n      if (parserName) {\n        var parser = inputParsers[parserName];\n        var parsedValue = parser(data.get(name));\n        data.set(name, parsedValue);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return data;\n}; // works great, non ie11 compliant\n\nexport var formToJSON = function formToJSON(form) {\n  var output = {};\n  new FormData(form).forEach(function (value, key) {\n    // Check if property already exist\n    if (Object.prototype.hasOwnProperty.call(output, key)) {\n      var current = output[key];\n\n      if (!Array.isArray(current)) {\n        // If it's not an array, convert it to an array.\n        current = output[key] = [current];\n      }\n\n      current.push(value); // Add the new value to the array.\n    } else {\n      output[key] = value;\n    }\n  });\n  return JSON.stringify(output);\n};\nexport var enumerateFormInputs = function enumerateFormInputs(form) {\n  var data = new FormData(form);\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = data.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var name = _step2.value;\n      console.log('Key: ' + name);\n      console.log('Value: ' + data.get(name));\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}; // this version works in IE 11 but doesn't handle array elements\n\nexport var formToJSONString = function formToJSONString(form) {\n  var obj = {};\n  var elements = form.querySelectorAll('input, select, textarea');\n\n  for (var i = 0; i < elements.length; ++i) {\n    var element = elements[i];\n    var name = element.name;\n    var value = element.value;\n\n    if (name) {\n      obj[name] = value;\n    }\n  }\n\n  return JSON.stringify(obj);\n}; // https://reactjs.org/docs/forms.html\n// `Textarea` does not implement pattern validation like `text` does.\n// A \"required\" value passes validation with *only* spaces. This function\n// will enable the pattern attribute on a textarea and trigger\n// HTML5 validation. Cool right!Ã¥\n\nexport var matchPattern = function matchPattern(event) {\n  var errorMessage = 'input does not match the required pattern';\n  var pattern = event.target.getAttribute('pattern');\n  var input = event.target.value; // Handles patterns that have the ^ or $ operators and does\n  // a global match using the g Regex flag:\n\n  if (typeof pattern !== typeof undefined && pattern !== false) {\n    var patternRegex = new RegExp('^' + pattern.replace(/^\\^|\\$$/g, '') + '$', 'g');\n    var hasError = !input.match(patternRegex);\n\n    if (typeof event.target.setCustomValidity === 'function') {\n      event.target.setCustomValidity(hasError ? errorMessage : '');\n    }\n  }\n};\nexport default {\n  enumerateFormInputs: enumerateFormInputs,\n  inputParsers: inputParsers,\n  formDataParser: formDataParser,\n  formToJSON: formToJSON,\n  formToJSONString: formToJSONString,\n  matchPattern: matchPattern\n};","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/utils/formUtils.js"],"names":["inputParsers","date","input","split","month","day","year","uppercase","toUpperCase","trim","number","parseFloat","formDataParser","form","data","FormData","keys","name","elements","parserName","dataset","parse","parser","parsedValue","get","set","formToJSON","output","forEach","value","key","Object","prototype","hasOwnProperty","call","current","Array","isArray","push","JSON","stringify","enumerateFormInputs","console","log","formToJSONString","obj","querySelectorAll","i","length","element","matchPattern","event","errorMessage","pattern","target","getAttribute","undefined","patternRegex","RegExp","replace","hasError","match","setCustomValidity"],"mappings":"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","sourcesContent":["export const inputParsers = {\n  date(input) {\n    const [month, day, year] = input.split('/');\n    return `${year}-${month}-${day}`;\n  },\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n  trim(input) {\n    return input.trim();\n  },\n  number(input) {\n    return parseFloat(input);\n  },\n};\n\n// use input parsers above\n// https://medium.com/@everdimension/how-to-handle-forms-with-just-react-ac066c48bd4f\nexport const formDataParser = form => {\n  const data = new FormData(form);\n\n  for (let name of data.keys()) {\n    const input = form.elements[name];\n    const parserName = input.dataset.parse;\n\n    if (parserName) {\n      const parser = inputParsers[parserName];\n      const parsedValue = parser(data.get(name));\n      data.set(name, parsedValue);\n    }\n  }\n\n  return data;\n};\n\n// works great, non ie11 compliant\nexport const formToJSON = form => {\n  let output = {};\n  new FormData(form).forEach((value, key) => {\n    // Check if property already exist\n    if (Object.prototype.hasOwnProperty.call(output, key)) {\n      let current = output[key];\n      if (!Array.isArray(current)) {\n        // If it's not an array, convert it to an array.\n        current = output[key] = [current];\n      }\n      current.push(value); // Add the new value to the array.\n    } else {\n      output[key] = value;\n    }\n  });\n  return JSON.stringify(output);\n};\n\nexport const enumerateFormInputs = form => {\n  const data = new FormData(form);\n  for (let name of data.keys()) {\n    console.log('Key: ' + name);\n    console.log('Value: ' + data.get(name));\n  }\n};\n\n// this version works in IE 11 but doesn't handle array elements\nexport const formToJSONString = form => {\n  var obj = {};\n  var elements = form.querySelectorAll('input, select, textarea');\n  for (var i = 0; i < elements.length; ++i) {\n    var element = elements[i];\n    var name = element.name;\n    var value = element.value;\n\n    if (name) {\n      obj[name] = value;\n    }\n  }\n\n  return JSON.stringify(obj);\n};\n\n// https://reactjs.org/docs/forms.html\n\n// `Textarea` does not implement pattern validation like `text` does.\n// A \"required\" value passes validation with *only* spaces. This function\n// will enable the pattern attribute on a textarea and trigger\n// HTML5 validation. Cool right!Ã¥\nexport const matchPattern = event => {\n  const errorMessage = 'input does not match the required pattern';\n  const pattern = event.target.getAttribute('pattern');\n  const input = event.target.value;\n\n  // Handles patterns that have the ^ or $ operators and does\n  // a global match using the g Regex flag:\n  if (typeof pattern !== typeof undefined && pattern !== false) {\n    var patternRegex = new RegExp(\n      '^' + pattern.replace(/^\\^|\\$$/g, '') + '$',\n      'g'\n    );\n\n    const hasError = !input.match(patternRegex);\n    if (typeof event.target.setCustomValidity === 'function') {\n      event.target.setCustomValidity(hasError ? errorMessage : '');\n    }\n  }\n};\n\nexport default {\n  enumerateFormInputs,\n  inputParsers,\n  formDataParser,\n  formToJSON,\n  formToJSONString,\n  matchPattern,\n};\n"]},"metadata":{},"sourceType":"module"}