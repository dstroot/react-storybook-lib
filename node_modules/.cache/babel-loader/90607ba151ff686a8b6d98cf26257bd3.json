{"ast":null,"code":"import _classCallCheck from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Dan/Code/react-component-lib-storybook/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Dan/Code/react-component-lib-storybook/src/components/FetchDemo/index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nvar FetchDemo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FetchDemo, _React$Component);\n\n  function FetchDemo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FetchDemo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FetchDemo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: [],\n      loading: true,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(FetchDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Remove the 'www.' to cause a CORS error (and see the error state)\n      axios.get(\"http://www.reddit.com/r/\".concat(this.props.subreddit, \".json\")).then(function (res) {\n        // Transform the raw data by extracting the nested posts\n        var posts = res.data.data.children.map(function (obj) {\n          return obj.data;\n        }); // Update state to trigger a re-render.\n        // Clear any errors, and turn off the loading indiciator.\n\n        _this2.setState({\n          posts: posts,\n          loading: false,\n          error: null\n        });\n      }).catch(function (err) {\n        // Something went wrong. Save the error in state and re-render.\n        _this2.setState({\n          loading: false,\n          error: err\n        });\n      });\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      return React.createElement(\"div\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Something went wrong: \", this.state.error.message);\n    }\n  }, {\n    key: \"renderPosts\",\n    value: function renderPosts() {\n      // Using destructuring to extract the 'error' and 'posts'\n      // keys from state. This saves having to write \"this.state.X\" everwhere.\n      var _this$state = this.state,\n          error = _this$state.error,\n          posts = _this$state.posts;\n\n      if (error) {\n        return this.renderError();\n      }\n\n      return React.createElement(\"table\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, posts.map(function (post) {\n        return React.createElement(\"tr\", {\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"badge badge-pill badge-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, post.score)), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, post.title));\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var subreddit = this.props.subreddit;\n      var loading = this.state.loading;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"/r/\".concat(subreddit)), loading ? this.renderLoading() : this.renderPosts())));\n    }\n  }]);\n\n  return FetchDemo;\n}(React.Component);\n\nFetchDemo.propTypes = {\n  /** The name of the subreddit to fetch, e.g. \"reactjs\". */\n  subreddit: PropTypes.string.isRequired\n};\nexport default FetchDemo;","map":{"version":3,"sources":["/Users/Dan/Code/react-component-lib-storybook/src/components/FetchDemo/index.js"],"names":["React","PropTypes","axios","FetchDemo","state","posts","loading","error","get","props","subreddit","then","res","data","children","map","obj","setState","catch","err","message","renderError","post","id","score","title","renderLoading","renderPosts","Component","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nclass FetchDemo extends React.Component {\n  // Set up the default state with a property intitializer\n  // instead of writing a whole constructor just for this\n  // You can reference 'this.props' here if you need to.\n  state = {\n    posts: [],\n    loading: true,\n    error: null\n  };\n\n  componentDidMount() {\n    // Remove the 'www.' to cause a CORS error (and see the error state)\n    axios\n      .get(`http://www.reddit.com/r/${this.props.subreddit}.json`)\n      .then(res => {\n        // Transform the raw data by extracting the nested posts\n        const posts = res.data.data.children.map(obj => obj.data);\n\n        // Update state to trigger a re-render.\n        // Clear any errors, and turn off the loading indiciator.\n        this.setState({\n          posts,\n          loading: false,\n          error: null\n        });\n      })\n      .catch(err => {\n        // Something went wrong. Save the error in state and re-render.\n        this.setState({\n          loading: false,\n          error: err\n        });\n      });\n  }\n\n  renderLoading() {\n    return <div className=\"text-muted\">Loading...</div>;\n  }\n\n  renderError() {\n    return (\n      <div className=\"text-danger\">\n        Something went wrong: {this.state.error.message}\n      </div>\n    );\n  }\n\n  renderPosts() {\n    // Using destructuring to extract the 'error' and 'posts'\n    // keys from state. This saves having to write \"this.state.X\" everwhere.\n    const { error, posts } = this.state;\n\n    if (error) {\n      return this.renderError();\n    }\n\n    return (\n      <table className=\"table\">\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id}>\n              <td>\n                <span className=\"badge badge-pill badge-primary\">\n                  {post.score}\n                </span>\n              </td>\n              <td>{post.title}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    const { subreddit } = this.props;\n    const { loading } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1>{`/r/${subreddit}`}</h1>\n            {loading ? this.renderLoading() : this.renderPosts()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFetchDemo.propTypes = {\n  /** The name of the subreddit to fetch, e.g. \"reactjs\". */\n  subreddit: PropTypes.string.isRequired\n};\n\nexport default FetchDemo;\n"]},"metadata":{},"sourceType":"module"}